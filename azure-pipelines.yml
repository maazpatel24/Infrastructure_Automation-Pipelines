# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  infraDirectory: $(Build.Repository.Localpath)/Infra
  playbookDirectory: $(Build.Repository.Localpath)/wordpress-auto-config

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false # with this configuration the job will quit if fails.
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'inline'
              script: 'az login'
              workingDirectory: '$(infraDirectory)'          
          - task: Bash@3
            displayName: init
            inputs:
              targetType: 'inline'
              script: 'terraform init'
              workingDirectory: '$(infraDirectory)'
          - task: Bash@3
            displayName: validate
            inputs:
              targetType: 'inline'
              script: 'terraform validate'
              workingDirectory: '$(infraDirectory)'



  - stage: tfdeploy
    # condition: succeeded('tfvalidate') # This stage only runs when previous stage completes successfully.
    # dependsOn: tfvalidate # It make sure it runs after tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: Bash@3
            displayName: Azure Login
            inputs:
              targetType: 'inline'
              script: 'az login'
              workingDirectory: '$(infraDirectory)'
          - task: Bash@3
            displayName: init
            inputs:
              targetType: 'inline'
              script: 'terraform init'
              workingDirectory: '$(infraDirectory)'
          - task: Bash@3
            displayName: plan
            inputs:
              targetType: 'inline'
              script: 'terraform plan'
              workingDirectory: '$(infraDirectory)'
          - task: Bash@3
            displayName: apply
            inputs:
              targetType: 'inline'
              script: 'terraform apply -auto-approve'
              workingDirectory: '$(infraDirectory)'
          - task: PublishPipelineArtifact@1
            displayName: publish invntoryfile
            inputs:
              targetPath: '$(playbookDirectory)/inventory.ini'
              artifact: 'Inventory-File'
              publishLocation: 'pipeline'

  - stage: ansiblePlaybook
    dependsOn: tfdeploy # It make sure it runs after tfdeploy
    jobs:
      - job: Download_Inventory_file_from_pipeline
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'Inventory-File'
              targetPath: '$(playbookDirectory)'
          - task: Bash@3                              # Ignore this task
            displayName: Ansible Directory Check
            inputs:
              targetType: 'inline'
              script: |
                ls -ahl $(Build.Repository.Localpath)
                echo --------------------------------
                cat inventory.ini
                echo --------------------------------
              workingDirectory: '$(playbookDirectory)'
              
      - job: playbookRun
        steps: 
          - task: Bash@3                              # Ignore this task
            displayName: Ansible Directory Check
            inputs:
              targetType: 'inline'
              script: |
                ls -ahl $(Build.Repository.Localpath)
                echo --------------------------------
                cat inventory.ini
                echo --------------------------------
              workingDirectory: '$(playbookDirectory)'
          # - task: Bash@3
          #   displayName: change Permission of .pem
          #   inputs:
          #     targetType: 'inline'
          #     script: 'chmod 400 maaz_id_rsa.pem'
          #     workingDirectory: '$(Build.Repository.Localpath)'
          
          # - task: Bash@3
          #   displayName: ansible-playbook
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       export ANSIBLE_HOST_KEY_CHECKING=False
          #       ansible-playbook -i inventory.ini playbook.yml
          #     workingDirectory: '$(playbookDirectory)'

  - stage: checking
    condition: failed('AnsiblePlaybook') # This stage only runs when previous stage completes successfully.
    dependsOn: AnsiblePlaybook # It make sure it runs after AnsiblePlaybook
    jobs:
      - job: list_down_directory
        steps:
          - task: Bash@3                              # Ignore this task
            displayName: Ansible Directory Check
            inputs:
              targetType: 'inline'
              script: |
                ls -ahl $(Build.Repository.Localpath)
                echo --------------------------------
                cat inventory.ini
                echo --------------------------------
              workingDirectory: '$(playbookDirectory)'


# jobs:
# - job: "Terraform_init"
#   steps:
#     - task: CmdLine@2
#       displayName: 'environment listing'
#       inputs:
#         script: |
#           pwd
#           echo "----------------------------"
#           ls '$(Build.Repository.Localpath)'
#           echo "----------------------------"
#           env | sort
#         workingDirectory: '$(System.ArtifactsDirectory)'